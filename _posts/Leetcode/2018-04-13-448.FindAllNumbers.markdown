---
layout:     post
title:      "448. Find All Numbers Disappeared in an Array"
subtitle:   " \"Hello World, Hello Blog\""
date:       2018-04-13 15:48:00
author:     "suny"
catalog: true
categories: Leetcode
tags:
    - 笔记
---
<img src="/img/FindAllNumbers.jpg"/>

思路: 这道题数组中的数字从1开始往上数，例如1-8，中间可能缺一个几个数，而数组下标也是有序的0-7，因此每个不重复的数字必然有一个对应唯一的下标位置，比如index=0，num = 7，那么index = 7的时候必定有一个唯一的对应数字，
因此，在一轮遍历之后出现index没有被标记为负数的就是，重复的数字。

nums   [4,3,2,7,8,2,3,1]  ---> [4,3,2,-7,-8,2,3,1]--->  [4,3,2,-7,-8,2,3,1]... --->  [-4,-3,-2,-7,-8,2,3,-1]
index  [0,1,2,3,4,5,6,7]  --->	   [0,1,2, 3, 4,5,6,7]  --->   [0,1,2, 3, 4,5,6,7]... ---> [-0, 1, 2, 3, 4,5,6, 7]
     从 0开始遍历--->                1                       2

python代码
	
	class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        for num in nums:
            nums[abs(num)-1] = -abs(nums[abs(num)-1])
        return [i+1 for i,num in enumerate(nums) if num > 0]



	
	


