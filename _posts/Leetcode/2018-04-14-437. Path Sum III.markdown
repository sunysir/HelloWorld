---
layout:     post
title:      "437. Path Sum III"
subtitle:   " \"Hello World, Hello Blog\""
date:       2018-04-14 16:48:00
author:     "suny"
catalog: true
categories: Leetcode
tags:
    - 笔记
---
<img src="/img/PathSumIII.jpg"/>



思路: 这道题就是使用递归思想，以局部看整体，每个根节点下面都有左右子树，这就是一个局部整体，求出跟节点与子节点所有的和左后，在把左右节点作为主跟节点，重复操作就可以得到所有符合sum的数量。

python代码
			
		#创建节点
		class Node(object):
		    def __init__(self,x):
		        self.x = x
		        self.right = None
		        self.left = None
		    
		class Solution(object):
		    def pathSum(self, root, sum):
		        """
		        :type root: TreeNode
		        :type sum: int
		        :rtype: int
		        """
				#求出每个根节点值与其所有子节点与子子节点。。。之和满足sum条件的总数量
		        def sumVal(root, sum):
		                if not root: return 0 
		                return (1 if root.val == sum else 0) +\
		                       sumVal(root.left, sum-root.val)  +\
		                       sumVal(root.right,sum-root.val) 
		        if not root: return 0
				把根节点的所有符合sum的数量和每个子节点符合sum数量总和加在一起
		        return (1 if root.val == sum else 0)+\
		               sumVal(root.left, sum-root.val)+\
		               sumVal(root.right,sum-root.val)+\
		               self.pathSum(root.right,sum)+\
		               self.pathSum(root.left, sum)



	
	


