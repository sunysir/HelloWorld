---
layout:     post
title:      "对象导论"
subtitle:   " \"Hello World, Hello Blog\""
date:       2018-01-03 11:00:00
author:     "suny"
catalog: true
categories: Miscellanea
tags:
    - 生活
---

## 1.1 抽象过程
**面向对象的设计方式有五个基本特性**

* 万物皆对象
	
		所有变量皆为对象,它能够存储数据,还能够创建方法.
* 程序是对象的集合，他们通过发送消息来告知彼此要做的
		
		程序是的所有变量都是对象,通过向对象发送消息(调用方法),对象收到消息后调用自身的方法(面向过程语言中的函数)。

* 每个对象中都包含有其他对象

		通俗的讲，就是创建新对象通过都包含现有对象,既每个对象都包含其他对象。

* 每个对象都拥有其类型

		每个对象其实都是类(类型)的实例化产物

* 某一特定的类型的所有对象都可以接受同样的消息

		就是一个类可以实例化无数个对象它们都可以同时调用相同的方法属性,唯一的区别就是它们的内存地址不同,每个对象都是唯一的地址

<img src="/img/1.jpg">

## 1.2 每个对象都有一个接口（这里所说的接口就是类中的方法）

类（类型）实例化的对象都拥有该类相同的属性和方法，但是它们都是唯一的。例如篮球运动员这个类实例化出篮球明星如科比，詹姆斯，他们都有共同的属性如性别年龄和相同的方法如打篮球，但他们每个对象都是唯一的独立的。接口定义了能够对该对象所发出的请求。

## 1.3 每个对象都提供服务

**当正在试图开发或理解一个程序设计时，最好的办法之一就是将对象想象为"服务提供者"。**

在开发时，可以将一个问题分解为多个对象去处理，每个对象负责完成什么事，这样做每个对象都会看起来非常简单，使思路非常清晰。同时将对象看做是服务提供者还有一个附带的好处，就是提高对象的内聚性，**高内聚是软件设计的基本质量要求之一**，每个对象都可能据说相同的功能，但他们分工不同。
	
	将对象作为服务提供者看待是一个伟大的简化工具，他不仅在设计过程中非常有用，而且当其他人试图理解或重用你的
	代码的时候，它会使调整对象以适应其设计过程变得简单得多。

## 1.4 被隐藏的具体实现

程序员按角色划分可以分为**类创建者**和**客户端程序员**，其中类创建者是创造类的程序员，客户端程序员是使用创造好的类（API）进行开发的程序员，其中创建的类中会有一些相对脆弱的部分或者隐私部分，不能够暴露给客户端程序员，仅暴露给其相应用于开发的接口，这样可以很大的避免被粗心的程序员将其破坏，从而有效减少程序中的BUG。

其中访问控制的存在有两个主要原因：

* 其一，让客户端程序员无法接触到不应该接触的部分，既该部分是程序运行的必要部分，但此部分对于客户解决问题没有直接相关性，只需要暴露给客户解决问题的相应接口部分即可。
* 其二，就是允许库设计者修改类的内部工作方式而不用担心影响到客户端程序员，通俗讲，就是我要提高该程序的运行速率，我需要对其核心进行改写，但我暴露的最终接口并没有改变，这样我可以随意改写核心部分提高性能，同时不会对客户端程序员有任何影响，API还是那个API，并没有改变。

java用三个特定关键词对其类的内部进行边界设定：**public**、**protected**、**private**。

* **public**：所有用户都可以访问，不受限制。
* **protected**：仅类内部和其继承的对象可以访问。
* **private**：仅类内部可以访问该成员。
* 还有一种是无关键词，该权限仅限于包内可以访问该成员，包外与**private**相同。
## 1.5 复用的具体实现

无处无对象，这句话就直接证明了所有对象都使用了复用，比如一个类中包含一个变量类型，其实也就是包含了一个变量类型的对象，就就可以叫做复用。

## 1.6 继承：复用接口 （关键字 extends）

当我们创建一个类的时候，希望在创建一个类拥有相同的属性和方法，就必须重新复制一份，然后这样做是非常麻烦的事情，因为出现了继承这个概念。被继承的类称为**（源类、父类、超类、基类）**，继承的类称为**子类(导出类)**。继承和复制的区别在于当父类中的属性和方法发生改变的时候，子类同时也会受到影响。

**两种方法可以使子类和父类产生差异（替代原则）**

* 子类可以在父类的基础上添加新属性和方法。**像是一个（is-like-a）关系**

<img src="/img/1.6.jpg">

* 子类可以重写（覆盖）父类的方法。**是一个（is-a）关系**

<img src="/img/1.6.2.jpg">

#1.7 伴随多态的可互换性对象

通俗的讲，多态就是将导出类**向上转型**看成是基类的一种操作。

<img src="/img/1.7.1.jpg">

####抽象基类和接口

通常在一个设计当中，我们会希望一个基类仅仅表示导出类的接口，并不希望它能够创建对象，这时候**抽象类**的作用就展现出来了。**抽象类**中抽象方法不能被具体实现，当该类被继承时，此抽象方法必须被具体实现，否则该导出类仍是抽象类。

	创建抽象方法的优点在于你可以将一个方法置于接口中，而不必被迫将
	其进行毫无意义的实现

随着抽象类的出现，**接口（interface）**关键字就出来了，它比抽象类要求更加严格，压根就不允许进行任何方法的定义。**(抽象类中可以同时存在抽象和非抽象的方法）。**

>**接口是一个非常方便和通用的工具。它将接口与实现完美的分离开来>。同时继承只能继承一个基类，而接口可以讲多个接口组合到一起。**



	






